name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Import Secrets
      uses: hashicorp/vault-action@v2.1.0
      with:
        url: https://pipeline.vault.11eaeb92-853e-2d98-8405-0242ac110009.aws.hashicorp.cloud:8200
        method: github
        githubToken: ${{ secrets.VAULT_GITHUB_AUTH_TOKEN }}
        namespace: admin
        secrets: |
            infrastructure-pipeline/azure/config subscription_id ;
            infrastructure-pipeline/azure/config tenant_id ;
            infrastructure-pipeline/static/data/database db_login | TF_VAR_db_username ;
            infrastructure-pipeline/static/data/database db_login_password | TF_VAR_db_password ;
            infrastructure-pipeline/azure/creds/pipeline client_id | ARM_CLIENT_ID ;
            infrastructure-pipeline/azure/creds/pipeline client_secret | ARM_CLIENT_SECRET ;
            infrastructure-pipeline/static/data/terraform token | TFC_TOKEN

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ env.TFC_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config=backends/prod

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: ARM_SUBSCRIPTION_ID=$(echo ${SUBSCRIPTION_ID//\"}) ARM_TENANT_ID=$(echo ${TENANT_ID//\"}) terraform plan -var-file=prod.tfvars

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: ARM_SUBSCRIPTION_ID=$(echo ${SUBSCRIPTION_ID//\"}) ARM_TENANT_ID=$(echo ${TENANT_ID//\"}) terraform apply -auto-approve -var-file=prod.tfvars
