name: 'Terraform'

on:
  push:
    branches:
    - main
    paths-ignore:
    - 'vault/**'
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Import Secrets
      uses: hashicorp/vault-action@v2.1.0
      with:
        url: ${{ secrets.VAULT_ADDR }}
        method: approle
        roleId: ${{ secrets.VAULT_ROLE_ID }}
        secretId: ${{ secrets.VAULT_SECRET_ID }}
        namespace: ${{ secrets.VAULT_NAMESPACE }}
        exportToken: true
        secrets: |
            infrastructure-pipeline/azure/config subscription_id | SUBSCRIPTION_ID ;
            infrastructure-pipeline/azure/config tenant_id | TENANT_ID ;
            infrastructure-pipeline/static/data/database db_login | TF_VAR_db_username ;
            infrastructure-pipeline/static/data/database db_login_password | TF_VAR_db_password ;
            infrastructure-pipeline/azure/creds/pipeline client_id | ARM_CLIENT_ID ;
            infrastructure-pipeline/azure/creds/pipeline client_secret | ARM_CLIENT_SECRET ;
            infrastructure-pipeline/static/data/terraform token | TFC_TOKEN

    - name: Verify secrets
      run: |
        if [ ${#SUBSCRIPTION_ID} -lt 36 ]; then echo "error" ; exit; fi
        if [ ${#TENANT_ID} -lt 36 ]; then echo "error" ; exit; fi
        if [ ${#ARM_CLIENT_ID} -lt 36 ]; then echo "error" ; exit; fi
        if [ ${#ARM_CLIENT_SECRET} -lt 36 ]; then echo "error" ; exit; fi

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ env.TFC_TOKEN }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init -backend-config=backends/prod

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      env:
        VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
        VAULT_NAMESPACE: ${{ secrets.VAULT_NAMESPACE }}
      run: |
        export ARM_SUBSCRIPTION_ID=$(echo $SUBSCRIPTION_ID | sed 's/"//g')
        export ARM_TENANT_ID=$(echo $TENANT_ID | sed 's/"//g')
        terraform plan -var-file=prod.tfvars

    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`${process.env.PLAN}\`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
        VAULT_NAMESPACE: ${{ secrets.VAULT_NAMESPACE }}
      run: |
        export ARM_SUBSCRIPTION_ID=$(echo $SUBSCRIPTION_ID | sed 's/"//g')
        export ARM_TENANT_ID=$(echo $TENANT_ID | sed 's/"//g')
        terraform apply -auto-approve -var-file=prod.tfvars
